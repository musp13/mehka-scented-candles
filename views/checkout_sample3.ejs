<%- include('includes/user-detail-head-end') %>
<% cartAmount = totalAmount %>
<section class="gradient-custom">
  <div class="container py-5">
    <!--Section: Design Block-->
    <section>
      <div class="row">
        <div class="col-md-8">
          <div class="card mb-4" style="background-color: #F9F5EA; border: 1px solid #e2e2e2;">
            <div class="card-body">
              <p class="text-uppercase fw-bold mb-3 text-font">Email address</p>
              <div class="row">
                <div class="col-md-4">
                  <p><%=user.email%></p>
                </div>
                <div class="col-md-7"></div>
              </div>
            </div>
          </div>
          <div class="card mb-4" style="background-color: #F9F5EA; border: 1px solid #e2e2e2;">
            <div class="card-body">
              <p class="text-uppercase h4 text-font">Delivery Address:</p>
              <% if(user.address.length == 0){ %> You haven't added any address.
              <% } else { %>
              <form id="addressSelectionForm">
                <!-- Loop through user addresses and create radio buttons -->
                <% user.address.forEach(function(address, index) { %>
                <div class="form-check d-flex justify-content-between">
                  <input
                    class="form-check-input"
                    type="radio"
                    name="selectedAddress"
                    id="address<%= index %>"
                    value="<%= address._id %>"
                  />
                  <label class="form-check-label" for="address<%= index %>">
                    <%= address.fullName %>, <%= address.addressLine %>, <%=
                    address.city %>, <%= address.pin %>
                  </label>
                  <button
                    class="btn btn-link trash-icon"
                    data-address-id="<%= address._id %>"
                  >
                    <i class="fa-regular fa-trash-can"></i>
                    <!-- You can use any trash icon you prefer -->
                  </button>
                </div>
                <% }); %>
                <!-- forEach closing tag -->
              </form>
              <!-- address selection form closing tag -->
              <% } %>
              <!--  else part closing tag -->
              <br /><button
                class="btn btn-outline-dark new-address-toggle-button"
                style="margin-top: 10px"
              >
                Add New Address</button
              ><!-- onclick="toggleNewAddress()"
                   -->
            </div>
          </div>
  
          <!-- New Address Card -->
          <div id="newAddressCard" style="display: none">
            <form id="addressForm">
              <input
                type="hidden"
                id="userId"
                name="userId"
                value="<%= user._id %>"
              />
              <div class="card mb-4">
                <div class="card-header py-3" style="background-color: #F9F5EA;">
                  <h5 class="mb-0 text-font text-uppercase">New address</h5>
                </div>
                <div class="card-body" style="padding: 50px;">
                  <div class="row">
                    <div class="col-md-12 mb-4">
                      <div class="form-outline">
                        <input
                          type="text"
                          id="fullName"
                          name="fullName"
                          class="form-control"
                        />
                        <label class="form-label" for="fullName">Full Name</label>
                      </div>
                      <!-- Error message container for Full Name -->
                      <span id="fullNameError" class="error-message"></span>
                    </div>
                  </div>
  
                  <div class="form-outline mb-4">
                    <!-- <input type="text" id="form3Example8" class="form-control" /> -->
                    <textarea
                      name="addressLine"
                      id="addressLine"
                      cols="30"
                      rows="2"
                      class="form-control"
                    ></textarea>
                    <label class="form-label" for="addressLine">Address</label>
                    <!-- Error message container for Full Name -->
                    <span id="addressLineError" class="error-message"></span>
                  </div>
  
                  <div class="row">
                    <div class="col-md-6 mb-4">
                      <div class="form-outline mb-4">
                        <input
                          type="text"
                          id="state"
                          name="state"
                          class="form-control"
                        />
                        <label class="form-label" for="state">State</label>
                        <!-- Error message container for Full Name -->
                        <span id="stateError" class="error-message"></span>
                      </div>
                    </div>
                    <div class="col-md-6 mb-4">
                      <div class="form-outline mb-4">
                        <input
                          type="text"
                          id="city"
                          name="city"
                          class="form-control"
                        />
                        <label class="form-label" for="city">City</label>
                        <!-- Error message container for Full Name -->
                        <span id="cityError" class="error-message"></span>
                      </div>
                    </div>
                  </div>
  
                  <div class="form-outline mb-4">
                    <input
                      type="text"
                      id="landmark"
                      name="landmark"
                      class="form-control"
                    />
                    <label class="form-label" for="landmark">Landmark</label>
                    <!-- Error message container for Full Name -->
                    <span id="landMarkError" class="error-message"></span>
                  </div>
  
                  <div class="form-outline mb-4">
                    <input type="text" id="pin" name="pin" class="form-control" />
                    <label class="form-label" for="pin">PIN</label>
                    <!-- Error message container for Full Name -->
                    <span id="pinError" class="error-message"></span>
                  </div>
  
                  <div class="form-outline mb-4">
                    <input
                      type="text"
                      id="phoneNumber"
                      name="phoneNumber"
                      class="form-control"
                    />
                    <label class="form-label" for="phoneNumber"
                      >Phone Number</label
                    >
                    <!-- Error message container for Full Name -->
                    <span id="phoneNumberError" class="error-message"></span>
                  </div>
  
                  <div class="d-flex justify-content-end pt-3">
                    <button
                      type="button"
                      class="btn btn-dark ms-2 send-address-btn"
                    >
                      Add Address
                    </button>
                    <!--   onclick="addAddress()" -->
                  </div>
                </div>
              </div>
            </form>
          </div>
          <!-- new address card closing div -->

          <!-- ------------coupon card------------------------- -->
          <div class="card mb-4" style="background-color: #F9F5EA; border: 1px solid #e2e2e2;">
            <div class="card-body">
              <label class="form-label" for="couponCode">Coupon Code</label>
              
              <div class="form-outline d-flex">
                <input type="text" id="couponCode" class="form-control" />
                <button class="btn btn-dark" id="applyCouponButton">Apply Coupon</button> 
              </div>
              <div id="applyCouponError" style="color:brown"></div> 
            </div>
          </div>
          <!-- ------------coupon card ends here -->
  
          <div class="card mb-4" style="background-color: #F9F5EA; border: 1px solid #e2e2e2;">
            <!-- new card for payment details -->
            <div class="card-body">
              <h5 class="card-title text-uppercase fw-bold text-dark">Payment Options</h5>
              <div class="row">
                <div class="col-md-12">
                  <!-- -----------------------payment details--------------------------------------------- -->
                  <div class="container py-3">
                    <div class="row">
                      <div class="col-lg-12 mx-auto">
                        <div class="bg-white rounded-lg shadow-sm p-4" style="height: 150px;">
                          <!-- Credit card form tabs -->
                          <ul role="tablist" class="nav bg-light nav-pills rounded-pill nav-fill mb-3">
                            <li class="nav-item">
                              <a data-toggle="pill" href="#nav-tab-card" class="nav-link payment-nav-link active rounded-pill" data-payment-option="Online Payment">
                                <i class="fa fa-credit-card"></i> Online Payment
                              </a>
                            </li>
                            <li class="nav-item">
                              <a data-toggle="pill" href="#nav-tab-cash-on-delivery" class="nav-link payment-nav-link rounded-pill" data-payment-option="COD">
                                <i class="fa fa-money-bill"></i> COD
                              </a>
                            </li>
                            <li class="nav-item">
                              <a data-toggle="pill" href="#nav-tab-wallet" class="nav-link payment-nav-link rounded-pill" data-payment-option="wallet">
                                <i class="fa fa-wallet"></i> Wallet
                              </a>
                            </li>
                          </ul>
                          <!-- End -->
          
                          <!-- Credit card form content -->
                          <div class="tab-content">
                            <!-- credit card info-->
                            <div id="nav-tab-card" class="tab-pane fade show active p-2">
                              <p style="margin: 10px; margin-bottom: 0;">Make an online payment through Razorpay.</p>
                            </div>
                            <!-- End -->
          
                            <!-- Cash on Delivery -->
                            <div id="nav-tab-cash-on-delivery" class="tab-pane fade">
                              <p>Pay with cash to our courier partner when your order is delivered.</p>
                            </div>

                             <!-- Wallet -->
                            <div id="nav-tab-wallet" class="tab-pane fade">
                              <p>Your Wallet balance is &#8377;<%=user.walletAmount.toFixed(2)%></p>
                              <span id="wallet-error-msg" style="color: brown;"></span>
                            </div>
                        
                          </div>
                          <!-- End -->

                          
                        <!-- End -->
                        </div>
                      </div>
                    </div>
                  </div>
          
                  <!-- ----------------------payment details end------------------------------------------ -->
                </div>
              </div>
            </div>
          </div>
          
        </div>
        <!-- left main col closing div -->
        <div class="col-md-4 mb-4 position-static">
          <!-- right main col opening -->
          <div class="card mb-4">
            <div class="card-header py-3" style="background-color: #F9F5EA  ;">
              <h5 class="mb-0 text-font">
                <%= user.cart.length %> item
                <!-- <span class="float-end mt-1"
                    style="font-size: 13px ;">Edit</span> -->
              </h5>
            </div>
            <div class="card-body">
              <div class="row">
                <ul
                  class="list-group list-group-flush"
                  style="margin-left: 10px; margin-right: 15px"
                >
                  <li
                    class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0"
                  >
                    Products
                    <span id="summaryTotalPrice"
                      >&#8377;<%= totalAmount.toFixed(2) %></span
                    >
                  </li>
                  <li
                    class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0"
                  >
                    Discount
                    <span id="discountAmount"
                      >&#8377;0</span
                    >
                  </li>
                  <li
                    class="list-group-item d-flex justify-content-between align-items-center px-0"
                  >
                    Shipping
                    <span>Gratis</span>
                  </li>
                </ul>
              </div>
              <div class="card-footer mt-4">
                <ul class="list-group list-group-flush">
                  <li
                    class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0 text-muted"
                  >
                    Subtotal <br />
                    (including VAT)
                    <span id="totalBillDisplay1">&#8377;<%= totalAmount.toFixed(2) %></span>
                  </li>
                  <li
                    class="list-group-item d-flex justify-content-between align-items-center px-0 fw-bold text-uppercase"
                  >
                    Total to pay
                    <span id="totalBillDisplay2">&#8377;<%= totalAmount.toFixed(2) %></span>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
  
        <div class="col-md-8 mb-4">
          <div class="text-center">
            <div id="place-order-error-msg" style="color: brown">Please   Select an Address to Proceed.</div>
            <button
              id="placeOrderButton"
              style="background-color: black"
              type="button"
              class="btn button-order col-md-10"
            >
              Place order
            </button>
          </div>
        </div>
      </div>
    </section>
    <!--Section: Design Block-->
  </div>
  
</section>

<script src="https://unpkg.com/sweetalert2@10"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script
  src="https://code.jquery.com/jquery-3.7.1.js"
  integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4="
  crossorigin="anonymous"
></script>

<script>
  let totalAmount = parseFloat('<%= totalAmount.toFixed(2) %>');
  let discountAmount = 0;
  let couponApplied = false;
  let couponId = null;
  const cartAmount = parseFloat('<%= cartAmount.toFixed(2) %>');
</script>

<script>

  var orderId ;

  // Define the toggleNewAddress function in the global scope
  function toggleNewAddress() {
    /* to toggle address button to add new address box */
    var newAddressCard = document.getElementById("newAddressCard");
    if (newAddressCard.style.display == "none") {
      newAddressCard.style.display = "block";
    } else {
      newAddressCard.style.display = "none";
    }
  }

  $(document).ready(function () {
    let userId = "<%= user._id %>";

    // Function to toggle error message and button state
  function toggleErrorAndButtonState() {
    const selectedAddress = $("input[name='selectedAddress']:checked").val();
    const errorElement = $("#place-order-error-msg");
    const placeOrderButton = $("#placeOrderButton");

    if (selectedAddress) {
      errorElement.hide(); // Hide the error message
      placeOrderButton.prop("disabled", false); // Enable the "Place Order" button
    } else {
      errorElement.show(); // Show the error message
      placeOrderButton.prop("disabled", true); // Disable the "Place Order" button
    }
  }

  // Attach change event listener to radio buttons
 /*  $("input[name='selectedAddress']").change(function() {
    toggleErrorAndButtonState();
  }); */

  // Attach change event listener to the form (event delegation)
  $("#addressSelectionForm").on("change","input[name='selectedAddress']",function(){
    toggleErrorAndButtonState();
  })

  // Initial state check when the page loads
  toggleErrorAndButtonState();

  // Add New Address button click event (if applicable)
  $(".new-address-toggle-button").click(function() {
    // Implement logic to toggle the new address form here
  });
    
    // Attach a click event handler to the "Add New Address" button
    $(".new-address-toggle-button").click(function () {
      console.log("click activated");
      toggleNewAddress();
    });

    // old space for toggle  new address button----------------------------------------------

    function addAddress() {
      const userId = $("#userId").val(); // Get the user ID
      const fullName = $("#fullName").val(); // Get other form fields by ID
      const addressLine = $("#addressLine").val();
      const state = $("#state").val();
      const city = $("#city").val();
      const landmark = $("#landmark").val();
      const pin = $("#pin").val();
      const phoneNumber = $("#phoneNumber").val();

      $(".error-message").text(""); // for displaying error messages for form validation

      // Perform validation on each field
      if (fullName.trim() === "") {
        $("#fullNameError").text("Please enter your full name.");
        return;
      }

      const nameRegex = /^[A-Za-z]+$/;
      if (!nameRegex.test(fullName)) {
        $("#fullNameError").text("Full name should contain only letters.");
        return;
      }

      if (addressLine.trim() === "") {
        $("#addressLineError").text("Please enter your address.");
        return;
      }

      if (state.trim() === "") {
        $("#stateError").text("Please enter your state.");
        return;
      }
      const stateRegex = /^[A-Za-z]+$/;
      if (!stateRegex.test(state)) {
        $("#stateError").text("State name should contain only letters.");
        return;
      }

      if (city.trim() === "") {
        $("#cityError").text("Please enter your city.");
        return;
      }

      if (landmark.trim() === "") {
        $("#landmarkError").text("Please enter a landmark.");
        return;
      }

      if (pin.trim() === "") {
        $("#pinError").text("Please enter a PIN code.");
        return;
      }

      const pinRegex = /^[1-9]\d{5}$/ ;  ///^[1-9]{6}$/
      if (!pinRegex.test(pin)) {
        $("#pinError").text("PIN Code should contain only 6 digits starting from non zero.");
        return;
      }

      if (phoneNumber.trim() === "") {
        $("#phoneNumberError").text("Please enter your phone number.");
        return;
      }

      const phoneNumberRegex = /^[6-9]\d{9}$/;   ///^[0-9]{10}$/
      if (!phoneNumberRegex.test(phoneNumber)) {
        $("#phoneNumberError").text(
          "Phone Number should contain only 10 digits starting from 6-9."
        );
        return;
      }

      // Create an object with the form data
      const formData = {
        userId: userId,
        fullName: fullName,
        addressLine: addressLine,
        state: state,
        city: city,
        landmark: landmark,
        pin: pin,
        phoneNumber: phoneNumber,
        // Add more fields as needed
      };

      // Send the form data to the server using $.ajax
      $.ajax({
        type: "POST",
        url: "/addAddressCheckout", //url to submit form
        data: formData,
        dataType: "json",
        success: function (response) {

          // Reset the form
          $("#addressForm")[0].reset(); // Using [0] to access the DOM element

          // Assuming 'response.user' contains the updated user object
          const updatedUser = response.user;

          // Assuming 'addressList' is the container element for the address selection list
          const addressList = document.getElementById("addressSelectionForm");

          // Create a new address element
          const newAddressDiv = document.createElement("div");
          newAddressDiv.classList.add(
            "form-check",
            "d-flex",
            "justify-content-between"
          );

          // Generate the HTML for the new address (customize as needed)
          const newAddressHTML = `
            <input class="form-check-input" type="radio" name="selectedAddress" id="address${
              updatedUser.address.length - 1
            }" value="${
            updatedUser.address[updatedUser.address.length - 1]._id
          }">
            <label class="form-check-label" for="address${
              updatedUser.address.length - 1
            }">
              ${
                updatedUser.address[updatedUser.address.length - 1].fullName
              }, ${
            updatedUser.address[updatedUser.address.length - 1].addressLine
          }, ${updatedUser.address[updatedUser.address.length - 1].city}, ${
            updatedUser.address[updatedUser.address.length - 1].pin
          }
            </label>
            <button class="btn btn-link trash-icon" data-address-id="${
              updatedUser.address[updatedUser.address.length - 1]._id
            }">
              <i class="fa-regular fa-trash-can"></i>
            </button>
          `;

          // Set the innerHTML of the new address element
          newAddressDiv.innerHTML = newAddressHTML;

          // Append the new address element to the address selection list
          addressList.appendChild(newAddressDiv);

          toggleNewAddress();
        },
        error: function (error) {
          console.error("Error:", error);
        },
      });
    } // addAddress() closing tag

    // Attach a click event handler to the button
    $(".send-address-btn").click(function () {
      addAddress();
    });

    // Attach a click event handler to the trash icon buttons
    //$(".trash-icon").click(function () {
      $(document).on('click',".trash-icon", function(){
      const addressId = $(this).data("address-id"); // Get the address ID from data attribute

      // Make an AJAX request to remove the address from the database
      $.ajax({
        type: "POST",
        url: `/removeAddress/${userId}/${addressId}`, // URL to remove the address
        dataType: "json",
        success: function (response) {
          // https://sweetalert.js.org/docs/
          console.log(response.message);
          if (response.success) {
            // Remove the address element from the UI
            $(this).parent().remove();
          } else {
            // Handle failure (e.g., display an error message)
            console.error("Failed to remove Address", response.message);
          }
        }.bind(this), // // Bind 'this' to the button element
        error: function (error) {
          console.error("Error", error);
        },
      }); // ajax request close
    });

    $(function () {
      /* -------------------------function for payment options------------------ */ $(
        '[data-toggle="tooltip"]'
      ).tooltip();
    }); /* -----------------------------------------end---------------------------------------- */

    // Toggle between payment method tabs
    $(".payment-nav-link").on("click", function (e) {
      e.preventDefault();
      $(this).tab("show");
    });
    /* --------------place order script--------------------------------- */

    let selectedPaymentOption = "Online Payment"; // Default payment option
    let walletBalance = parseFloat('<%=user.walletAmount%>');
    console.log(walletBalance);

    // Attach a click event handler to the payment tabs
    $(".payment-nav-link").click(function () {
      // Get the selected payment option from the data attribute
      selectedPaymentOption = $(this).data("payment-option");
      
      // Handle special logic if "Use Wallet" is selected
      if (selectedPaymentOption === "wallet") {
        // Check if the wallet balance is sufficient for the order
        if (walletBalance < totalAmount) {
          // Handle insufficient balance
          $("#wallet-error-msg").text("Insufficient wallet balance.");
          // Disable the "Place Order" button
          $("#placeOrderButton").prop("disabled", true);


          return;
        }
      }
      else
      {
        $("#placeOrderButton").prop("disabled", false);
      }
    });

    
    // Attach a click event handler to the "Place Order" button
  $("#placeOrderButton").click(function (e) {
    // Get the selected address ID from the radio button
    const selectedAddressId = $("input[name='selectedAddress']:checked").val();
    if (!selectedAddressId) {
      // Handle the case where no address is selected
      // You can show an error message to the user.
      $("#place-order-error-msg").text("Select an Address.");
      return;
    }

    // Check if the wallet balance is sufficient for the order
    if (selectedPaymentOption === "wallet" && walletBalance < totalAmount) {
      // Use SweetAlert to display an error message
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Insufficient wallet balance. Choose another payment method.',
      });
      return;
    }

    // Create an object with the order details
    const orderDetails = {
      userId: "<%= user._id %>",
      addressId: selectedAddressId, // Use the selected address ID
      paymentMethod: selectedPaymentOption, // Include the selected payment option
      totalAmount: totalAmount,
      couponDiscountAmount: discountAmount,
      cartAmount: cartAmount,
      couponId: couponId,
      // Add other order details like payment method, order items, etc.
      // For example: paymentMethod: "Credit Card",
      // You should fetch and include the order items from your cart.
    };

    // Send the order details to the server using $.ajax
    $.ajax({
      type: "POST",
      url: "/placeOrder", // Replace with the actual server route
      data: orderDetails,
      dataType: "json",
      success: function (response) {
        const dbOrderId = response.dbOrderId;
        const orderDetails = response.orderDetails;
        const serverOrderId = response.orderId;
        /* const updateStockPromises = response.updateStockPromises; */
        console.log('serverOrderId',serverOrderId);
        // Handle the success response from the server
        // You can show a success message to the user and redirect them to a thank you page.
        if(response.status)
        {
          console.log("Order placed successfully", response);
          // Example: window.location.href = "/thankyou";
          window.location.href = `/orderDetails/${response.orderId}`;
        }
        else
        {
          var options = {
              "key": "rzp_test_hv0OIxYvcvbirP", // Enter the Key ID generated from the Dashboard
              "amount": "<%= totalAmount %>", // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
              "currency": "INR",
              "name": "Mehak Candles",
              "description": "Scented Candles store",
              "image": "images/razorpay_logo.webp",
              "order_id": response.orderId, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
              "handler": function (response){
                  //window.location.href = `/orderDetails/${response.order.id}`;
                  /* alert(response.razorpay_payment_id);
                  alert(response.razorpay_order_id);
                  alert(response.razorpay_signature) */
                  
                  /* console.log(response.orderId); */
                  // Handle the Razorpay payment response
                  if (response.razorpay_payment_id) {
                    // Payment was successful
                    // Send payment details to your server
                    const paymentDetails = {
                      paymentId: response.razorpay_payment_id,
                      orderId: response.razorpay_order_id,
                      signature: response.razorpay_signature,
                      serverOrderId: serverOrderId,
                      orderDetails: orderDetails,
                      /* updateStockPromises : updateStockPromises, */
                      /* dbOrderId: dbOrderId, */
                      
                    };

                    // Send payment details to your server using AJAX
                    $.ajax({
                      type: 'POST',
                      url: '/processPayment', // Replace with your server endpoint
                      data: paymentDetails,
                      dataType: 'json',
                      success: function (result) {
                        if (result.status === true) {
                          console.log('Payment successfully processed on the server');
                          // Redirect or show a success message to the user
                          window.location.href = `/orderDetails/${dbOrderId}`;
                        } else {
                          console.error('Payment processing on the server failed:', result.message);
                        }
                      },
                      error: function (error) {
                        console.error('Error processing payment on the server:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Processing Error',
                            text: result.message, // Display the error message from the server
                        });
                      },
                    });
                  } else {
                    // Payment failed or was canceled by the user
                    console.error('Payment failed:', response.error_description);
                  }
              },
              "theme": {
                  "color": "#bd6d81"
              }
            };
            var rzp1 = new Razorpay(options);
            rzp1.on('payment.failed', function (response){
                    /* alert(response.error.code);
                    alert(response.error.description);
                    alert(response.error.source);
                    alert(response.error.step);
                    alert(response.error.reason);
                    alert(response.error.metadata.order_id);
                    alert(response.error.metadata.payment_id); */
            });
            rzp1.open();
          e.preventDefault();
        }//else close

      },//success close
      error: function (error) {
        // Handle errors, e.g., display an error message to the user
        let errorMsg = error.message;
        console.error("Error placing order", error);
        Swal.fire({
          title: 'Error Placing Order',
          text: errorMsg,
          icon: 'warning',
          onClose: function () {
          // Redirect the user to the cart page after the SweetAlert is closed
          window.location.href = '/load-checkout'; // Adjust the URL as needed
    }
        });
        
      },//error close
    });//ajax close
  });//placeordr button close

  // Example of applying coupons
  document.getElementById("applyCouponButton").addEventListener("click", function () {
      const couponCodeInput = document.getElementById("couponCode");
      const couponCode = couponCodeInput.value;
      const cartAmount = totalAmount.toFixed(2);
      console.log('Apply button clicked');

      // Clear any previous error messages
      document.getElementById('applyCouponError').textContent = '';

      if (!couponApplied) {
        // Make an AJAX request to validate and apply the coupon
        $.ajax({
          url: "/validateCoupon", // Replace with your server's route
          type: "POST",
          data: { couponCode, userId, cartAmount , couponApplied},
          success: function (response) {
            if (response.valid) {
              // Coupon is valid, update the UI with the applied discount
              discountAmount = parseInt(response.discountAmount);
              // Update the UI with the discount amount
              totalAmount = parseInt(totalAmount - discountAmount);
              couponApplied = true;
              couponId = response.couponId;

              // Update the UI to show "Cancel Coupon" button
              document.getElementById("applyCouponButton").textContent = "Cancel Coupon";
              document.getElementById("applyCouponButton").classList.remove("btn-dark");
              document.getElementById("applyCouponButton").classList.add("btn-danger");

              // Disable the "Apply Coupon" button
              //document.getElementById("applyCouponButton").disabled = true;
              document.getElementById('discountAmount').innerHTML = '&#8377;'+discountAmount.toFixed(2);
              document.getElementById('totalBillDisplay1').innerHTML = '&#8377;'+totalAmount.toFixed(2);
              document.getElementById('totalBillDisplay2').innerHTML = '&#8377;'+totalAmount.toFixed(2);
              console.log(totalAmount)
            } else {
              // Coupon is not valid, display an error message
              const errorMessage = response.message;
              // Display the error message to the user
              document.getElementById('applyCouponError').textContent = errorMessage;
            }
          },
          error: function (error) {
            console.error("Error applying coupon", error);
          }
        });
      }
      else
      {
        // If coupon is already applied, cancel it on the client side
        couponApplied = false;
        couponId = null;

        // Reset the discount amount to 0
        discountAmount = 0;

        // Update the UI to show "Apply Coupon" button
        document.getElementById("applyCouponButton").textContent = "Apply Coupon";
        document.getElementById("applyCouponButton").classList.remove("btn-danger");
        document.getElementById("applyCouponButton").classList.add("btn-dark");

        // Reset totalAmount to the cartAmount (initial value)
        totalAmount = parseInt('<%=cartAmount%>');
        document.getElementById("discountAmount").innerHTML = "&#8377;0.00";
        document.getElementById("totalBillDisplay1").innerHTML = "&#8377;" + totalAmount.toFixed(2);
        document.getElementById("totalBillDisplay2").innerHTML = "&#8377;" + totalAmount.toFixed(2);
        console.log(totalAmount);

      }
    });
  }); //document.ready close
</script>





<%- include('includes/tail-end') %>
