<%- include('includes/user-detail-head-end') %>
    <style>
        /* ... (Your existing CSS) ... */
        /* Resetting */
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        /* Navbar */
        nav {
            background-color: #f0ecec;
            min-height: 70px;
        }

        .navbar-toggler:focus {
            box-shadow: none;
        }

        .navbar-brand .logo {
            padding: 10px 15px;
            border-radius: 8px;
        }

        .navbar-brand .logo .h2 {
            margin: 0;
        }

        .navbar-brand .h4 {
            margin-bottom: 0px;
            font-weight: 900;
        }

        .navbar-brand .fs-6 {
            font-size: 0.88rem !important;
        }

        nav ul li {
            padding: 0 20px;
        }

        .navbar-light .navbar-nav .nav-link {
            color: #333;
        }

        .navbar-light .navbar-nav .nav-link:hover {
            color: #c0044c;
        }

        .navbar-light .navbar-nav .nav-link.active {
            color: #c0044c;
        }

        nav ul li a .cart {
            padding: 4px 6px;
            border-radius: 6px;
            position: relative;
            display: inline;
        }

        nav ul li a .cart::after {
            position: absolute;
            content: "";
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #ff5252;
            top: -1px;
        }

        /* Sidebar */
        #sidebar {
            background-color: #c0044c;
            padding: 15px 0px 15px 0px;
            border-radius: 10px;
            color: #fff;
        }

        #sidebar .h4 {
            font-weight: 500;
            padding-left: 15px;
        }

        #sidebar ul {
            list-style: none;
            margin: 0;
            padding-left: 0rem;
        }

        #sidebar ul li {
            padding: 10px 0;
            display: block;
            padding-left: 1rem;
            border-left: 5px solid transparent;
        }

        #sidebar ul li.active {
            border-left: 5px solid #ff5252 ;  /* this is how the styling is given */
            background-color: #c0044c;
        }

        #sidebar ul li a {
            display: block;
            color: #fff;
            text-decoration: none;
        }

        #sidebar ul li a .fas,
        #sidebar ul li a .far {
            color: #ddd;
        }

        #sidebar ul li a .link {
            font-weight: 500;
        }

        #sidebar ul li a .link-desc {
            font-size: 0.8rem;
            color: #ddd;
        }

        /* Main Content */
        #main-content {
            padding: 30px;
            border-radius: 15px;
            background-color: #fff;
            border: 1px solid #ddd;
        }

        #main-content .h5,
        #main-content .text-uppercase {
            font-weight: 600;
            margin-bottom: 0;
        }

        #main-content .h5+div {
            font-size: 0.9rem;
        }

        .box {
            padding: 10px;
            border-radius: 6px;
            width: 170px;
            height: 90px;
            background-color: #f0ecec;
        }

        .box img {
            width: 40px;
            height: 40px;
            object-fit: contain;
        }

        .box .tag {
            font-size: 0.9rem;
            color: #000;
            font-weight: 500;
        }

        .box .number {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .order {
            padding: 20px;
            min-height: 150px;
            background-color: #f0ecec;
            border: 1px solid #ddd;
            margin-top: 20px;
            border-radius: 6px;
        }

        .order .order-summary {
            height: 100%;
        }

        .order .blue-label {
            background-color: #aeaeeb;
            color: #0046dd;
            font-size: 0.9rem;
            padding: 0px 3px;
        }

        .order .green-label {
            background-color: #a8e9d0;
            color: #008357;
            font-size: 0.9rem;
            padding: 0px 3px;
        }

        .order .fs-8 {
            font-size: 0.85rem;
        }

        .order .rating img {
            width: 20px;
            height: 20px;
            object-fit: contain;
        }

        .order .rating .fas,
        .order .rating .far {
            font-size: 0.9rem;
        }

        .order .rating .fas {
            color: #daa520;
        }

        .order .status {
            font-weight: 600;
        }

        .order .btn.btn-primary {
            background-color: #fff;
            color: #c0044cc5;
            border: 1px solid #c0044c;
        }

        .order .btn.btn-primary:hover {
            background-color: #c0044c;
            color: #fff;
        }

        .order .progressbar-track {
            margin-top: 20px;
            margin-bottom: 20px;
            position: relative;
        }

        .order .progressbar-track .progressbar {
            list-style: none;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding-left: 0rem;
        }

        .order .progressbar-track .progressbar li {
            font-size: 1.5rem;
            border: 1px solid #333;
            padding: 5px 10px;
            border-radius: 50%;
            background-color: #dddddd;
            z-index: 100;
            position: relative;
        }

        .order .progressbar-track .progressbar li.green {
            border: 1px solid #007965;
            background-color: #d5e6e2;
        }

        .order .progressbar-track .progressbar li::after {
            position: absolute;
            font-size: 0.9rem;
            top: 50px;
            left: 0px;
        }

        #tracker {
            position: absolute;
            border-top: 1px solid #bbb;
            width: 100%;
            top: 25px;
        }

        #step-1::after {
            content: 'Placed';
        }

        #step-2::after {
            content: 'Accepted';
            left: -10px;
        }

        #step-3::after {
            content: 'Packed';
        }

        #step-4::after {
            content: 'Shipped';
        }

        #step-5::after {
            content: 'Delivered';
            left: -10px;
        }

        /* Backgrounds */
        .bg-purple {
            background-color: #55009b;
        }

        .bg-light {
            background-color: #f0ecec !important;
        }

        .green {
            color: #007965 !important;
        }

        /* Media Queries */
        @media (max-width: 1199.5px) {
            nav ul li {
                padding: 0 10px;
            }
        }

        @media (max-width: 500px) {
            .order .progressbar-track .progressbar li {
                font-size: 1rem;
            }

            .order .progressbar-track .progressbar li::after {
                font-size: 0.8rem;
                top: 35px;
            }

            #tracker {
                top: 20px;
            }
        }

        @media (max-width: 440px) {
            #main-content {
                padding: 20px;
            }

            .order {
                padding: 20px;
            }

            #step-4::after {
                left: -5px;
            }
        }

        @media (max-width: 395px) {
            .order .progressbar-track .progressbar li {
                font-size: 0.8rem;
            }

            .order .progressbar-track .progressbar li::after {
                font-size: 0.7rem;
                top: 35px;
            }

            #tracker {
                top: 15px;
            }

            .order .btn.btn-primary {
                font-size: 0.85rem;
            }
        }

        @media (max-width: 355px) {
            #main-content {
                padding: 15px;
            }

            .order {
                padding: 10px;
            }
        }
    </style>

    <div class="container mt-4">
        <div class="row">
            <div class="col-lg-3 my-lg-0 my-md-1">
                <div id="sidebar">
                    <div class="h4">Account</div>
                    <ul>
                        <li class="active">
                            <a href="#" class="text-decoration-none d-flex align-items-start" onclick="showOrders()">
                                <div class="fas fa-box pt-2 me-3"></div>
                                <div class="d-flex flex-column">
                                    <div class="link">My Orders</div>
                                    <div class="link-desc">View & Manage orders and returns</div>
                                </div>
                            </a>
                        </li>
                        <li>
                            <a href="#" class="text-decoration-none d-flex align-items-start" onclick="showProfile()">
                                <div class="far fa-user pt-2 me-3"></div>
                                <div class="d-flex flex-column">
                                    <div class="link">My Profile</div>
                                    <div class="link-desc">Change your profile details<!--  & password --></div>
                                </div>
                            </a>
                        </li>
                        <li>
                            <a href="#" class="text-decoration-none d-flex align-items-start" onclick="showWallet()">
                                <div class="fas fa-wallet pt-2 me-3"></div>
                                <div class="d-flex flex-column">
                                    <div class="link">My Wallet</div>
                                    <div class="link-desc">View your available balance </div>

                                </div>
                            </a>
                        </li>
                        <!-- Add more tabs as needed -->
                    </ul>
                </div>
            </div>
            <div class="col-lg-9 my-lg-0 my-1">
                <div id="main-content">
                    <!-- Content will be dynamically displayed here based on the selected tab -->
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.1/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- <script>
        const numFavorites = '<%=numFavorites%>'
    </script> -->
    <script>
        // Add an event listener to each tab
        document.querySelectorAll("#sidebar ul li").forEach(tab => {
            tab.addEventListener("click", () => {
                // Remove the "active" class from all tabs
                document.querySelectorAll("#sidebar ul li").forEach(tab => {
                    tab.classList.remove("active");
                });

                // Add the "active" class to the clicked tab
                tab.classList.add("active");
            });
        });

    </script>
    <script>
        const userId = '<%=user._id%>';
        function showOrders() {
            // Clear the main content area
            const mainContent = document.getElementById("main-content");
            document.getElementById("main-content").innerHTML = "";

            // Fetch and display the user's orders dynamically here
            // You can use AJAX to fetch orders from the server and populate the main-content area
            // Example:
             $.ajax({
                 url: "/fetchOrders",
                 method: "GET",
                 success: function(data) {
                     // Populate the main-content area with order information
                     //document.getElementById("main-content").innerHTML = data.orders;

                     // Append the content you provided to the main-content area
                    mainContent.innerHTML = `
                        <div class="d-flex flex-column">
                            <div class="h5">Hello ${data.user.fullName},</div>
                            <div>Logged in as: ${data.user.email}</div>
                        </div>
                        <div class="d-flex my-4 flex-wrap">
                            <div class="box me-4 my-1">
                            <img src="https://www.freepnglogos.com/uploads/box-png/cardboard-box-brown-vector-graphic-pixabay-2.png" alt="">
                            <div class="d-flex align-items-center mt-2">
                                <div class="tag">Orders placed</div>
                                <div class="ms-auto number"> <%= orders.length %></div>
                            </div>
                        </div>
                        <div class="box me-4 my-1">
                            <img src="https://www.freepnglogos.com/uploads/shopping-cart-png/shopping-cart-campus-recreation-university-nebraska-lincoln-30.png" alt="">
                            <div class="d-flex align-items-center mt-2">
                                <div class="tag">Items in Cart</div>
                                <div class="ms-auto number"><%= user.cart.length %></div>
                            </div>
                        </div>
                        <div class="box me-4 my-1">
                            <img src="https://www.freepnglogos.com/uploads/love-png/love-png-heart-symbol-wikipedia-11.png" alt="">
                            <div class="d-flex align-items-center mt-2">
                                <div class="tag">Wishlist</div>
                                <div class="ms-auto number"><%= numFavorites %></div>
                            </div>
                        </div>
                        </div>
                        <div class="text-uppercase">My orders</div>
                        ${data.orders.map(order => `
                            <div class="order my-3">
                                <div class="row">
                                    <div class="col-lg-4">
                                        <!-- Display order details dynamically -->
                                        <div class="d-flex flex-column justify-content-between order-summary">
                                            <div class="d-flex align-items-center">
                                                <div class="text-uppercase">Order <!-- #${order.invoiceId} --></div>
                                                <div class="blue-label ms-auto text-uppercase">${order.paymentReceived ? 'PAID' : 'NOT PAID'}</div>
                                            </div>
                                            <div class="fs-8">Products #${order.orderItems.length}</div>
                                                <div class="fs-8">${new Date(order.orderDate).toLocaleString('en-US', {
                                                    year: 'numeric',
                                                    month: 'long',
                                                    day: 'numeric',
                                                    hour: '2-digit',
                                                    minute: '2-digit',
                                                    hour12: true
                                                })}</div>
                                            <!-- ... (other order details) ... -->
                                        </div>
                                    </div>
                                    <div class="col-lg-8">
                                        <div class="d-sm-flex align-items-sm-start justify-content-sm-between">
                                            <div class="status text-uppercase">Status : ${order.orderStatus}</div>
                                            <div class="btn-group">
                                                <div class="btn btn-primary text-uppercase" onclick="redirectToOrderDetails('${order._id}')">order info</div>
                                                ${order.orderStatus === 'placed' || order.orderStatus === 'pending' ? `
                                                    <div class="btn btn-danger text-uppercase cancel-order-button" data-order-id="${order._id}">Cancel Order</div>
                                                ` : ''}
                                                ${order.orderStatus === 'delivered'? `
                                                    <div class="btn btn-warning text-uppercase return-order-button" data-order-id="${order._id}">Return Order</div>
                                                ` : ''}
                                            </div>
                                        </div>
                                        <!-- ... (other order details) ... -->
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                        <!-- ... (other content) ... -->
                    `;

                    /* ------------------cancel order----------- */
                // AJAX request to cancel an order
                $(".cancel-order-button").click(function () {
                    const orderId = $(this).data("order-id");
                    const buttonElement = $(this); // Store a reference to the button
                    console.log('cancel button clicked' );

                    Swal.fire({
                        icon: 'warning',
                        title: 'Are You Sure?',
                        text: 'Do you really want to cancel this order?',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, cancel it!',
                        cancelButtonText: 'No, keep it'
                    }).then((result)=>{
                        if(result.isConfirmed){
                            // The user clicked "Yes" in the confirmation prompt, proceed with cancellation
                            $.ajax({
                            type: "POST",
                            url: `/cancelOrder/${orderId}`,
                            dataType: "json",
                            success: function (response) {
                                    console.log(response.message);
                                    // Handle success (e.g., display a confirmation message)
                                    const updatedStatus = 'cancelled';

                                    // Find the corresponding status element and update its text
                                    const statusElement = buttonElement.closest(".order").find(".status");
                                    statusElement.text(`Status: ${updatedStatus}`);

                                    // Display a SweetAlert with a success message
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Order Canceled',
                                        text: 'Your order has been canceled successfully!',
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            // Remove the button from the DOM
                                            buttonElement.remove();
                                        }
                                    });
                                },
                                error: function (error) {
                                    console.error("Error", error);
                                    // Handle error (e.g., display an error message)
                                    
                                },
                            });
                        }/* ); */
                    });
                });
            /* -------------end of cancel order------------- */
/* 
                }
            }); */

                   
            
            /* ---------------------return order-------------------- */
                // AJAX request to cancel an order
                $(".return-order-button").click(function () {
                    const orderId = $(this).data("order-id");
                    const buttonElement = $(this); // Store a reference to the button
                    console.log('return button clicked' );

                    // Display a confirmation prompt using SweetAlert
                    Swal.fire({
                        icon: 'warning',
                        title: 'Are you sure?',
                        text: 'Do you really want to return this order?',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, return it!',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                type: "POST",
                                url: `/returnOrder/${orderId}`,
                                dataType: "json",
                                success: function (response) {
                                    console.log(response.message);
                                    // Handle success (e.g., display a confirmation message)
                                    const updatedStatus = 'return';

                                    // Find the corresponding status element and update its text
                                    const statusElement = buttonElement.closest(".order").find(".status");
                                    statusElement.text(`Status: ${updatedStatus}`);

                                    // Display a SweetAlert with a success message
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Return Request Processing',
                                        text: 'Your return request has been accepted and is processing!',
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            // Remove the button from the DOM
                                            buttonElement.remove();
                                        }
                                    });
                                },
                                error: function (error) {
                                    console.error("Error", error);
                                    // Handle error (e.g., display an error message)
                                    
                                },
                            });
                        }
                    });
                });
            /* ------------------end of return order----------------- */
                 }
             });
        }

        function showProfile() {
            // Clear the main content area
            document.getElementById("main-content").innerHTML = "";
            const mainContent = document.getElementById("main-content");
            
            // Fetch and display the user's profile information dynamically here
            // Example:
             $.ajax({
                 url: "/fetchUserProfile",
                 method: "GET",
                 success: function(data) {
                     // Populate the main-content area with user profile information
                     //document.getElementById("main-content").innerHTML = data;

                     // Append the content you provided to the main-content area
                    mainContent.innerHTML = `
                        <!-- edit form column -->
                        <div class="row">
                            <div class="col-md-6 personal-info">
                                <h3 style="margin-left:15px;">Personal info</h3>
                                <!--<button id="resetPassword" type="button" class="btn btn-success report-type-buttons-class pink-button" onclick="window.location.href='/forgot_password'" value="resetPassword">Reset Password</button>
                                <br>-->
                                <br>
                                <form class="form-horizontal" id="profileForm" role="form">
                                    <div class="form-group">
                                        <label class="col-lg-12 control-label">Full Name:</label>
                                        <div class="col-lg-12">
                                            <input class="form-control" type="text" name="fullName" id="fullName" value="${data.user.fullName}">
                                            <span class="error text-danger" id="fullNameError"></span>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-lg-12 control-label">Phone</label>
                                        <div class="col-lg-12">
                                            <input class="form-control" type="text" name="phone" id="phone" value="`+(data.user.phone?data.user.phone:'')+`">
                                            <span class="error text-danger" id="phoneError"></span>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-lg-12" col-lg-offset-3">
                                            <button class="btn btn-dark btn-block" id="editProfileButton" type="submit">Edit</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="col-md-6 personal-info">
                                <h3>Password Reset</h3>
                                <br>
                                <div class="form-group">
                                    <label>Password:</label>
                                    <input class="form-control" type="password" name="password" id="password" placeholder="New Password">
                                    <span class="error text-danger" id="passwordError"></span>
                                </div>
                                <div class="form-group">
                                    <label>Retype Password:</label>
                                    <input class="form-control" type="password" name="retypePassword" id="retypePassword" placeholder="Retype Password">
                                    <span class="error text-danger" id="retypePasswordError"></span>
                                </div>
                                <button class="btn btn-dark btn-block" id="resetPasswordButton" type="submit">Reset Password</button>
                            </div>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row mt-3 mx-3" style="margin-top:25px ;">
                </div>
                
                <div class="col-md-9 justify-content-center">
                    <div class="card pb-4">
                        <div class="card-body mt-0 mx-5">
                            <div class="text-center mb-3 pb-2 mt-3">
                                <h4 style="color: #495057 ;">Add New Address</h4>
                            </div>
                            <form class="mb-0" id="addressForm">
                                <div class="row mb-4">
                                    <div class="col">
                                        <div class="form-outline">
                                            <input type="text" id="fullNameAddress" name="fullNameAddress" class="form-control input-custom" />
                                            <label class="form-label" for="fullNameAddress">Full name</label>
                                        </div>
                                        <!-- Error message container for Full Name -->
                                        <span id="fullNameAddressError" class="error-message"></span>
                                    </div>
                                    <div class="col">
                                        <div class="form-outline">
                                            <input type="text" id="phoneNumber" name="phoneNumber" class="form-control input-custom" />
                                            <label class="form-label" for="phoneNumber">Phone Number</label>
                                            <!-- Error message container for Full Name -->
                                            <span id="phoneNumberError" class="error-message"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-4">
                                    <div class="col">
                                        <div class="form-outline">
                                            <textarea
                                                name="addressLine"
                                                id="addressLine"
                                                cols="30"
                                                rows="2"
                                                class="form-control input-custom"
                                            ></textarea>
                                            <label class="form-label" for="addressLine">Address</label>
                                            <!-- Error message container for Full Name -->
                                            <span id="addressLineError" class="error-message"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-4">
                                    <div class="col">
                                        <div class="form-outline">
                                            <input type="text" id="state" name="state" class="form-control input-custom" />
                                            <label class="form-label" for="state">State</label>
                                            <!-- Error message container for Full Name -->
                                            <span id="stateError" class="error-message"></span>
                                        </div>
                                    </div>
                                <div class="col">
                            <div class="form-outline">
                                <input type="text" id="city" name="city" class="form-control input-custom" />
                                <label class="form-label" for="city">City</label>
                                <!-- Error message container for Full Name -->
                                <span id="cityError" class="error-message"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-4">
                        <div class="col">
                            <div class="form-outline">
                                <input type="text" id="landmark" name="landmark" class="form-control input-custom" />
                                <label class="form-label" for="landmark">Landmark</label>
                                <!-- Error message container for Full Name -->
                                <span id="landmarkError" class="error-message"></span>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-outline">
                                <input type="text" id="pin" name="pin" class="form-control input-custom" />
                                <label class="form-label" for="pin">PIN</label>
                                <!-- Error message container for Full Name -->
                                <span id="pinError" class="error-message"></span>
                            </div>
                        </div>
                    </div>
                    <div class="float-end ">
                        <!-- Submit button -->
                        <button type="submit" id="addAddressButton" class="btn btn-dark btn-rounded send-address-btn"
                        >Add Address</button>
                    </div>
                </form>
            </div>
        </div>
  </div>
</div>
<hr>
<div id="userAddressesContainer"></div>
                    `;

                    //form validation
                    //const $productNameInput = $('#name');
                    const $fullNameInput = $('#fullName');
                    const $phoneInput = $('#phone');
                    const $fullNameError = $('#fullNameError');
                    const $phoneError = $('#phoneError');
                    const $editProfileButton = $('#editProfileButton');
                    //const profileForm = document.getElementById('profileForm');

                    $fullNameInput.on('keyup', function () {
                        const fullName = $(this).val().trim();

                        
                        if (fullName === '') {
                            $fullNameError.text('Full name cannot be blank.');
                            $editProfileButton.prop('disabled', true); // Disable the edit button
                        } else if (!/^[a-zA-Z\s]*$/.test(fullName)) {
                            $fullNameError.text('Full name should only contain letters and spaces.');
                            $editProfileButton.prop('disabled', true); // Disable the edit button
                        }
                        else {
                            $fullNameError.text('');
                            $editProfileButton.prop('disabled', false); // Enable the edit button
                        }
                    });

                $phoneInput.on('keyup', function () {
                    const phone = $(this).val().trim();

                    if (phone === '') {
                        $phoneError.text('Please Add your phone number');
                        $editProfileButton.prop('disabled', true); // Enable the edit button
                    } else if (!/^[6-9]\d{9}$/.test(phone)) {
                        $phoneError.text('Phone number should be a valid 10-digit number starting with numbers 6-9.');
                        $editProfileButton.prop('disabled', true); // Disable the edit button
                    } else {
                        $phoneError.text('');
                        $editProfileButton.prop('disabled', false); // Enable the edit button
                    }
                });




                // Add event listener for form submission
            document.getElementById("profileForm").addEventListener("submit", function (e) {
                e.preventDefault(); // Prevent the default form submission

                // Validate and submit the form using AJAX
                const formData = $(this).serialize(); // Serialize form data
                $.ajax({
                    url: "/updateUserProfile",
                    method: "POST",
                    data: formData,
                    success: function (response) {
                        // Handle the server's response, e.g., show success message or errors
                        if (response.success) {
                            // Update displayed information with the new data
                            document.getElementById("fullName").textContent = response.updatedUser.fullName;
                            document.getElementById("phone").textContent = response.updatedUser.phone;

                            // Show a SweetAlert success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Profile Updated',
                                text: 'Your profile has been updated successfully!',
                            });

                            // Hide the form and show the "Edit" button again
                            //document.getElementById("profileForm").style.display = "none";
                            //document.getElementById("editProfile").style.display = "block";
                        } else {
                            // Display error messages
                            document.getElementById("fullNameError").textContent = response.errors.fullName;
                            document.getElementById("phoneError").textContent = response.errors.phone;
                        }
                    },
                });
            });

            // Implement keyup validation for password fields
            const $passwordInput = $('#password');
            const $retypePasswordInput = $('#retypePassword');
            const $passwordError = $('#passwordError');
            const $retypePasswordError = $('#retypePasswordError');
            const $resetPasswordButton = $('#resetPasswordButton');

             // Password validation
            $passwordInput.on('keyup', function () {
                const password = $(this).val().trim();

                if (password === '') {
                    $passwordError.text('Password cannot be blank.');
                    $resetPasswordButton.prop('disabled', true);
                } else if(password.length<4)
                {
                    $passwordError.text('Password must be at least 4 characters.');
                    $resetPasswordButton.prop('disabled',true);
                }
                else {
                    $passwordError.text('');
                    $resetPasswordButton.prop('disabled', false);
                }
            });

            // Retype Password validation
            $retypePasswordInput.on('keyup', function () {
                const retypePassword = $(this).val().trim();
                const password = $passwordInput.val().trim();

                if (retypePassword === '') {
                    $retypePasswordError.text('Retype Password cannot be blank.');
                    $resetPasswordButton.prop('disabled', true);
                } else if (retypePassword !== password) {
                    $retypePasswordError.text('Passwords do not match.');
                    $resetPasswordButton.prop('disabled', true);
                } else {
                    $retypePasswordError.text('');
                    $resetPasswordButton.prop('disabled', false);
                }
            });

            $resetPasswordButton.on('click', function(e){
                e.preventDefault();

                const newPassword = $passwordInput.val().trim();

                //validate the new password
                if(newPassword.length< 4)
                {
                    $passwordError.text('Password must be at least 4 characters.');
                    return;
                }

                // Send an AJAX request to update the password
                $.ajax({
                    url : '/profileResetPassword',
                    method: "POST",
                    data : { password : newPassword },
                    success: function(response)
                             {   
                                if(response.success)
                                { /* window.alert('Password updated.') */
                                    // Password updated successfully
                                    // Show a success message and perform any necessary UI updates
                                    Swal.fire({
                                        title: 'Password updated.',
                                        text: response.message,
                                        icon: 'success',
                                        timer: 1000,
                                    });
                                    $passwordInput.val('');
                                    $retypePasswordInput.val('');
                                    $passwordError.text('');
                                    $retypePasswordError.text('');
                                }
                                else{
                                    // Handle password update failure
                                    // Display an error message to the user
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'Error  Resetting Password.',
                                        icon: 'error',
                                        timer: 1000,
                                    });
                                    $passwordInput.val('');
                                    $retypePasswordInput.val('');
                                    $passwordError.text('');
                                    $retypePasswordError.text('');
                                }
                             },
                    error: function(error){
                                // Handle AJAX request errors
                                console.log('Error resetting password.')
                            },
                });
            });


            //validation for address form
            const $fullNameAddressInput = $('#fullNameAddress');
            const $phoneNumberInput = $('#phoneNumber');
            const $addressLineInput = $('#addressLine');
            const $stateInput = $('#state');
            const $cityInput = $('#city');
            const $landmarkInput = $('#landmark');
            const $pinInput = $('#pin');

            const $fullNameAddressError = $('#fullNameAddressError');
            const $phoneNumberError = $('#phoneNumberError');
            const $addressLineError = $('#addressLineError');
            const $stateError = $('#stateError');
            const $cityError = $('#cityError');
            const $landmarkError = $('#landmarkError');
            const $pinError = $('#pinError');
            const $addAddressButton = $('#addAddressButton');

            $fullNameAddressInput.on('keyup', function () {
                const fullNameAddress = $(this).val().trim();

                if (fullNameAddress === '') {
                    $fullNameAddressError.text('Full name cannot be blank.');
                    $addAddressButton.prop('disabled', true);
                } else if (!/^[a-zA-Z\s]*$/.test(fullNameAddress)) {
                    $fullNameAddressError.text('Full name should only contain letters and spaces.');
                    $addAddressButton.prop('disabled', true);
                } else {
                    $fullNameAddressError.text('');
                    $addAddressButton.prop('disabled', false);
                }
            });

            $phoneNumberInput.on('keyup', function () {
                const phoneNumber = $(this).val().trim();

                if (phoneNumber === '') {
                    $phoneNumberError.text('Phone number cannot be blank.');
                    $addAddressButton.prop('disabled', true);
                } else if (!/^[6-9]\d{9}$/.test(phoneNumber)) {
                    $phoneNumberError.text('Phone number should be a valid 10-digit number starting from 9-6.');
                    $addAddressButton.prop('disabled', true);
                } else {
                    $phoneNumberError.text('');
                    $addAddressButton.prop('disabled', false);
                }
            });

            $addressLineInput.on('keyup', function () {
                const addressLine = $(this).val().trim();

                if (addressLine === '') {
                    $addressLineError.text('Address cannot be blank.');
                    $addAddressButton.prop('disabled', true);
                } else {
                    $addressLineError.text('');
                    $addAddressButton.prop('disabled', false);
                }
            });

            $stateInput.on('keyup', function () {
                const state = $(this).val().trim();

                if (state === '') {
                    $stateError.text('State cannot be blank.');
                    $addAddressButton.prop('disabled', true);
                } else {
                    $stateError.text('');
                    $addAddressButton.prop('disabled', false);
                }
            });

            $cityInput.on('keyup', function () {
                const city = $(this).val().trim();

                if (city === '') {
                    $cityError.text('City cannot be blank.');
                    $addAddressButton.prop('disabled', true);
                } else {
                    $cityError.text('');
                    $addAddressButton.prop('disabled', false);
                }
            });

            $landmarkInput.on('keyup', function () {
                const landmark = $(this).val().trim();

                if (landmark === '') {
                    $landmarkError.text('Landmark cannot be blank.');
                    $addAddressButton.prop('disabled', true);
                } else {
                    $landmarkError.text('');
                    $addAddressButton.prop('disabled', false);
                }
            });

            $pinInput.on('keyup', function () {
                const pin = $(this).val().trim();

                if (pin === '') {
                    $pinError.text('PIN cannot be blank.');
                    $addAddressButton.prop('disabled', true);
                } else if (!/^[1-9]\d{5}$/.test(pin)) {  ///^[6-9]\d{9}$
                    $pinError.text('PIN should be a valid 6-digit number without any spaces.');
                    $addAddressButton.prop('disabled', true);
                } else {
                    $pinError.text('');
                    $addAddressButton.prop('disabled', false);
                }
            });

            // Add event listener for form submission
            $('#addressForm').on('submit', function (e) {
                e.preventDefault(); // Prevent the default form submission

                // Validate and submit the form using AJAX
                const formData = $(this).serialize(); // Serialize form data
                $.ajax({
                    url: '/addAddressUserProfile', // Replace with the appropriate URL for adding addresses
                    method: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            // Address added successfully, you can display a success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Address Added',
                                text: 'Your address has been added successfully!',
                            });

                            // Extract the updated user object from the response
                            const updatedUser = response.user;


                            // Render the user's addresses from the updated user object
                            renderUserAddresses(response.user.address);

                        } else {
                            // Handle any errors that may occur during address addition
                            // You can display error messages to the user
                            // For example: $('#fullNameAddressError').text(response.message);
                        }
                    },
                });
            });

            //display all addresses
            function renderUserAddresses(addresses) {
                const addressesContainer = $('#userAddressesContainer');

                if (addresses && addresses.length > 0) {
                    addressesContainer.empty(); // Clear any existing addresses

                    addresses.forEach((address, index) => {
                        const addressItem = `
                            <div class="col-md-6">
                                <div class="bg-white card addresses-item mb-4 shadow-sm">
                                    <div class="gold-members p-4">
                                        <div class="media">
                                            <div class="mr-3"><i class="icofont-ui-home icofont-3x"></i></div>
                                            <div class="media-body">
                                                <h6 class="mb-1 text-secondary">${address.fullName}</h6>
                                                <p class="text-black">${address.addressLine}, ${address.city}, ${address.state} ${address.pin}</p>
                                                <p class="mb-0 text-black font-weight-bold">
                                                    <!--<a class="text-primary mr-3" data-toggle="modal" data-target="#edit-address-modal-${index}" href="#"><i class="icofont-ui-edit"></i> EDIT</a>-->
                                                    <a class="text-danger delete-address-link" data-address-id="${address._id}" data-toggle="modal" data-target="#delete-address-modal-${index}" href="#"><i class="icofont-ui-delete"></i> DELETE</a>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;

                        addressesContainer.append(addressItem);

                        // Add corresponding edit and delete modals here using Bootstrap modals
                        // You can generate these modals dynamically based on the address data
                    });
                } else {
                    // Display a message if there are no addresses
                    const noAddressesMessage = `
                        <div class="container">
                            <p>No addresses found.</p>
                        </div>
                    `;
                    addressesContainer.html(noAddressesMessage);
                }
            }
            renderUserAddresses(data.user.address);

            /* --------------to delete address----------------------- */
            // Attach a click event handler to the trash icon buttons
            $(".delete-address-link").click(function (e) {
                e.preventDefault(); // Prevent the default link behavior

                const addressId = $(this).data("address-id"); // Get the address ID from data attribute

                // Confirm the deletion with a confirmation dialog (optional)
                Swal.fire({
                    title: "Confirm Deletion",
                    text: "Are you sure you want to delete this address?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete it",
                    cancelButtonText: "Cancel",
                }).then((result) => {
                    if (result.isConfirmed) {

                        // Make an AJAX request to remove the address from the database
                        $.ajax({
                            type: "POST",
                            url: `/removeAddress/${userId}/${addressId}`, // URL to remove the address
                            dataType: "json",
                            success: function (response) {
                                // https://sweetalert.js.org/docs/
                                console.log(response.message);
                                if (response.success) {
                                    // Remove the address element from the UI
                                    //$(this).parent().remove();
                                    // Remove the address element from the UI
                                    $(this).closest(".addresses-item").remove();
                                } else {
                                    // Handle failure (e.g., display an error message)
                                    console.error("Failed to remove Address", response.message);
                                }
                            }.bind(this), // // Bind 'this' to the button element
                            error: function (error) {
                            console.error("Error", error);
                            }
                        }); // ajax request close
                    }//if close
                });//then close
            });//click remove address close

            /* --------------end of delete address----------------------- */

            
            
                 }
             });

             

        }

        function showWallet(){
            //clear the main content area
            
            document.getElementById("main-content").innerHTML = "";

            //fetch and display the wallet balance dynamically here
            $.ajax({
                url: '/fetchWalletBalance', // url for fetching wallet balance
                method : "GET",
                success: function(data) {
                    const mainContent = document.getElementById("main-content");
                    mainContent.innerHTML = `
                                                <div class="col-md-5"></div>
                                                <div class="col-md-9 personal-info" style="margin-left:8vw;">
                                                    <center><img src="/images/wallet-icon-mehka.webp" style="height:30vh;"></center>
                                                    <center>
                                                    <h3 class="my-3">My Wallet</h3>
                                                    <p class="my-3" style="font-size:20px;">Your available balance: <span style="color:#C0044C;font-weight:bold">&#8377;${data.walletBalance}</span></p>
                                                    </center>   
                                                </div>
                                            `;
                }
            });
        }
        // Initialize the page with the "My Orders" tab content
        showOrders();
    </script>
    <script>
        // JavaScript function to redirect to the order details route
        function redirectToOrderDetails(orderId) {
            // Construct the URL for the order details route
            const orderDetailsUrl = `/orderDetails/${orderId}`;
            
            // Redirect the user to the order details route
            window.location.href = orderDetailsUrl;
        }

        
    </script>

    
    
</body>
</html>
